// This file was generated by running 'ng generate @angular/material:m3-theme'.
// Proceed with caution if making changes to this file.

@use 'sass:map';
@use '@angular/material' as mat;

@use 'palette' as palette;

$_rest: (
    secondary: map.get(palette.$palettes, secondary),
    neutral: map.get(palette.$palettes, neutral),
    neutral-variant: map.get(palette.$palettes, neutral-variant),
    error: map.get(palette.$palettes, error),
);
$_primary: map.merge(map.get(palette.$palettes, primary), $_rest);
$_tertiary: map.merge(map.get(palette.$palettes, tertiary), $_rest);

$light-theme: mat.define-theme(
    (
        color: (
            theme-type: light,
            primary: $_primary,
            tertiary: $_tertiary,
        ),
        typography: (
            plain-family: Yekan,
        ),
        density: (
            scale: maximum,
        ),
    )
);
$dark-theme: mat.define-theme(
    (
        color: (
            theme-type: dark,
            primary: $_primary,
            tertiary: $_tertiary,
        ),
    )
);

@mixin themeComponents($theme, $allComponentColors) {
    @if ($allComponentColors) {
        @include mat.all-component-colors($theme);
    }

    .primary {
        @include mat.button-color($theme, $color-variant: primary);
    }
}

@mixin materialRoleColorToVariable($theme) {
    --primary: #{mat.get-theme-color($theme, primary)};
    --on-primary: #{mat.get-theme-color($theme, on-primary)};
    --primary-container: #{mat.get-theme-color($theme, primary-container)};
    --on-primary-container: #{mat.get-theme-color($theme, on-primary-container)};
    --primary-fixed: #{mat.get-theme-color($theme, primary-fixed)};
    --primary-fixed-dim: #{mat.get-theme-color($theme, primary-fixed-dim)};
    --on-primary-fixed: #{mat.get-theme-color($theme, on-primary-fixed)};
    --on-primary-fixed-variant: #{mat.get-theme-color($theme, on-primary-fixed-variant)};
    --secondary: #{mat.get-theme-color($theme, secondary)};
    --on-secondary: #{mat.get-theme-color($theme, on-secondary)};
    --secondary-container: #{mat.get-theme-color($theme, secondary-container)};
    --on-secondary-container: #{mat.get-theme-color($theme, on-secondary-container)};
    --secondary-fixed: #{mat.get-theme-color($theme, secondary-fixed)};
    --secondary-fixed-dim: #{mat.get-theme-color($theme, secondary-fixed-dim)};
    --on-secondary-fixed: #{mat.get-theme-color($theme, on-secondary-fixed)};
    --on-secondary-fixed-variant: #{mat.get-theme-color($theme, on-secondary-fixed-variant)};
    --tertiary: #{mat.get-theme-color($theme, tertiary)};
    --on-tertiary: #{mat.get-theme-color($theme, on-tertiary)};
    --tertiary-container: #{mat.get-theme-color($theme, tertiary-container)};
    --on-tertiary-container: #{mat.get-theme-color($theme, on-tertiary-container)};
    --tertiary-fixed: #{mat.get-theme-color($theme, tertiary-fixed)};
    --tertiary-fixed-dim: #{mat.get-theme-color($theme, tertiary-fixed-dim)};
    --on-tertiary-fixed: #{mat.get-theme-color($theme, on-tertiary-fixed)};
    --on-tertiary-fixed-variant: #{mat.get-theme-color($theme, on-tertiary-fixed-variant)};
    --error: #{mat.get-theme-color($theme, error)};
    --on-error: #{mat.get-theme-color($theme, on-error)};
    --error-container: #{mat.get-theme-color($theme, error-container)};
    --on-error-container: #{mat.get-theme-color($theme, on-error-container)};
    --surface-dim: #{mat.get-theme-color($theme, surface-dim)};
    --surface: #{mat.get-theme-color($theme, surface)};
    --surface-bright: #{mat.get-theme-color($theme, surface-bright)};
    --surface-container-lowest: #{mat.get-theme-color($theme, surface-container-lowest)};
    --surface-container-low: #{mat.get-theme-color($theme, surface-container-low)};
    --surface-container: #{mat.get-theme-color($theme, surface-container)};
    --surface-container-high: #{mat.get-theme-color($theme, surface-container-high)};
    --surface-container-highest: #{mat.get-theme-color($theme, surface-container-highest)};
    --on-surface: #{mat.get-theme-color($theme, on-surface)};
    --on-surface-variant: #{mat.get-theme-color($theme, on-surface-variant)};
    --outline: #{mat.get-theme-color($theme, outline)};
    --outline-variant: #{mat.get-theme-color($theme, outline-variant)};
    --inverse-surface: #{mat.get-theme-color($theme, inverse-surface)};
    --inverse-on-surface: #{mat.get-theme-color($theme, inverse-on-surface)};
    --inverse-primary: #{mat.get-theme-color($theme, inverse-primary)};
    --scrim: #{mat.get-theme-color($theme, scrim)};
    --shadow: #{mat.get-theme-color($theme, shadow)};
}

:root {
    @include mat.all-component-themes($light-theme);
    @include themeComponents($light-theme, false);
}

:root {
    @include materialRoleColorToVariable($light-theme);
}

body.dark {
    @include themeComponents($dark-theme, true);
}

body.dark {
    @include materialRoleColorToVariable($dark-theme);
}
